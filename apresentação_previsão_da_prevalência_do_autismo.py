# -*- coding: utf-8 -*-
"""Apresentação : Previsão da Prevalência do Autismo

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1k5CpZvby0vOwsMZkC3JrA_vB6T1gfQwj

# **Apresentação da Pesquisa: Previsão da Prevalência do Autismo até 2030**
## **Introdução**
 O autismo é um transtorno do neurodesenvolvimento caracterizado por dificuldades na comunicação, interação social e padrões restritos e repetitivos de comportamento. A compreensão da prevalência do autismo ao longo do tempo é crucial para o planejamento de políticas de saúde e intervenções eficazes. Nesta pesquisa, exploramos métodos de modelagem estatística para prever a prevalência do autismo até 2030, com base em dados históricos.

## **Metodologia**

* **Coleta de Dados:** Utilizamos dados de prevalência do autismo de 2000 a 2020, obtidos de fontes confiáveis de vigilância epidemiológica.
"""

import pandas as pd
# Criando o dicionário com os dados
data = {
    'Ano da Vigilância': [2020, 2018, 2016, 2014, 2012, 2010, 2008, 2006, 2004, 2002, 2000],
    'Ano de Nascimento': [2012, 2010, 2008, 2006, 2004, 2002, 2000, 1998, 1996, 1994, 1992],
    'Número de relatórios de sites ADDM': [11, 11, 11, 11, 11, 11, 14, 11, 8, 14, 6],
    'Prevalência Combinada por 1.000 Crianças': [27.6, 23.0, 18.5, 16.8, 14.5, 14.7, 11.3, 9.0, 8.0, 6.6, 6.7],
    '1 em X crianças': ['1 em 36', '1 em 44', '1 em 54', '1 em 59', '1 em 69', '1 em 68', '1 em 88', '1 em 110', '1 em 125', '1 em 150', '1 em 150']
}

# Criando o DataFrame
df = pd.DataFrame(data)
# Exibindo o DataFrame
df

import matplotlib.pyplot as plt
import seaborn as sns

# Definindo o estilo do gráfico
sns.set(style="whitegrid")

# Criando o gráfico de barras
plt.figure(figsize=(10, 6))
sns.barplot(x='Ano da Vigilância', y='Prevalência Combinada por 1.000 Crianças', data=df, palette='viridis')
plt.title('Prevalência do Autismo por Ano de Vigilância')
plt.xlabel('Ano da Vigilância')
plt.ylabel('Prevalência por 1.000 Crianças')
plt.xticks(rotation=45)
plt.tight_layout()

# Exibindo o gráfico
plt.show()

"""* **Exploração de Modelos:**
  *  Implementamos um modelo de regressão polinomial para entender a tendência temporal da prevalência.
  *  Adotamos um modelo de crescimento logístico para capturar o crescimento limitado da prevalência ao longo do tempo.
* **Análise Estatística:**
  *   Calculamos os parâmetros dos modelos usando técnicas de ajuste de curvas.
  *   Projetamos a prevalência estimada do autismo para cada ano da vigilância de 2000 a 2030.
"""

import numpy as np
import pandas as pd
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# Dados fornecidos
anos = np.array([2020, 2018, 2016, 2014, 2012, 2010, 2008, 2006, 2004, 2002, 2000]).reshape(-1, 1)
prevalencia = np.array([36, 44, 54, 59, 69, 68, 88, 110, 125, 150, 150])

# Ajustando um modelo de regressão polinomial
grau_polynomial = 2  # Grau do polinômio
poly = PolynomialFeatures(degree=grau_polynomial)
X_poly = poly.fit_transform(anos)

# Treinando o modelo de regressão linear
modelo = LinearRegression()
modelo.fit(X_poly, prevalencia)

# Preparando os dados de previsão
anos_previstos = np.array(range(2000, 2031)).reshape(-1, 1)
X_poly_previsto = poly.transform(anos_previstos)

# Fazendo previsões para os anos de 2000 a 2030
previsao = modelo.predict(X_poly_previsto)

# Criando DataFrame com os resultados
resultados = pd.DataFrame({'Ano da Vigilância': range(2000, 2031), 'Previsão de 1 em X crianças': previsao})

# Exibindo os resultados
print(resultados)

"""## **Resultados e Discussão**

###**Regressão Polinomial**



*    **Parâmetros Estimados:** Coeficientes da equação polinomial.
*    **Prevalência Estimada:** Projeções para cada ano da vigilância.
*    **Interpretação:** Identificação de tendências temporais significativas na prevalência do autismo.
"""

resultados

import matplotlib.pyplot as plt

# Criando o gráfico de linha
plt.figure(figsize=(10, 6))
plt.plot(resultados['Ano da Vigilância'], resultados['Previsão de 1 em X crianças'], marker='o', color='blue', linestyle='-')
plt.title('Previsão de Prevalência do Autismo (2000-2030)')
plt.xlabel('Ano da Vigilância')
plt.ylabel('Previsão de 1 em X crianças')
plt.grid(True)
plt.xticks(range(2000, 2031, 2), rotation=45)
plt.tight_layout()

# Exibindo o gráfico
plt.show()

"""##**Crescimento Logístico**
*  **Parâmetros Estimados:** Limite superior, taxa de crescimento, ponto de inflexão.
*  **Prevalência Estimada:** Projeções para cada ano da vigilância.
Interpretação: Reconhecimento do crescimento limitado da prevalência ao longo do tempo..
* **Interpretação:** Reconhecimento do crescimento limitado da prevalência ao longo do tempo.
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt

# Função do modelo logístico ajustada para considerar a prevalência inicial
def modelo_logistico(x, C, k, x0, inicial):
    return inicial + (C - inicial) / (1 + np.exp(-k * (x - x0)))

# Parâmetros do modelo (ajustados)
C = 150  # Limite superior da função (prevalência máxima do autismo)
k = 0.1  # Taxa de crescimento
x0 = 2010  # Ponto médio da curva logística (ano em que a prevalência atinge metade de C)
inicial = 1 / 150  # Prevalência inicial em 2000

# Anos da vigilância
anos = np.arange(2000, 2031)

# Calculando a prevalência estimada do autismo para cada ano da vigilância
prevalencia_estimada = modelo_logistico(anos, C, k, x0, inicial)
prevalencia_estimada

# Criando o DataFrame com os anos da vigilância e as prevalências estimadas
df_prevalencia_estimada = pd.DataFrame({
    'Ano da Vigilância': anos,
    'Prevalência Estimada': prevalencia_estimada
})

# Exibindo o DataFrame
df_prevalencia_estimada

# Plotando o gráfico
plt.figure(figsize=(10, 6))
plt.plot(anos, prevalencia_estimada, label='Prevalência Estimada', color='blue')
plt.title('Prevalência Estimada de Autismo ao Longo dos Anos')
plt.xlabel('Ano da Vigilância')
plt.ylabel('Prevalência Estimada (1 em X crianças)')
plt.grid(True)
plt.legend()
plt.show()

import numpy as np
import pandas as pd
from sklearn.preprocessing import PolynomialFeatures
from sklearn.linear_model import LinearRegression

# Função do modelo logístico ajustada para considerar a prevalência inicial
def modelo_logistico(x, C, k, x0, inicial):
    return inicial + (C - inicial) / (1 + np.exp(-k * (x - x0)))

# Parâmetros do modelo logístico
C = 150  # Limite superior da função (prevalência máxima do autismo)
k = 0.1  # Taxa de crescimento
x0 = 2010  # Ponto médio da curva logística (ano em que a prevalência atinge metade de C)
inicial = 1 / 150  # Prevalência inicial em 2000

# Anos da vigilância
anos = np.arange(2000, 2019).reshape(-1, 1)

# Dados de prevalência de 2000 a 2018
prevalencia = np.array([150, 125, 110, 88, 69, 68, 59, 54, 44, 36, 23, 18, 16, 14, 14, 11, 9, 8, 6])

# Ajustando um modelo de regressão polinomial
grau_polynomial = 2  # Grau do polinômio
poly = PolynomialFeatures(degree=grau_polynomial)
X_poly = poly.fit_transform(anos)

# Treinando o modelo de regressão polinomial
modelo_polinomial = LinearRegression()
modelo_polinomial.fit(X_poly, prevalencia)

# Previsões do modelo polinomial
previsao_polinomial = modelo_polinomial.predict(X_poly)

# Previsões do modelo logístico
previsao_logistica = modelo_logistico(anos.flatten(), C, k, x0, inicial)

# Comparação de resultados
resultados_comparacao = pd.DataFrame({
    'Ano da Vigilância': anos.flatten(),
    'Prevalência Real': prevalencia,
    'Previsão Polinomial': previsao_polinomial,
    'Previsão Logística': previsao_logistica
})

# Exibindo os resultados de comparação
resultados_comparacao